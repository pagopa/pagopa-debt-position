microservice-chart:
  namespace: "gps"
  nameOverride: ""
  fullnameOverride: ""
  image:
    repository: ghcr.io/pagopa/pagopa-debt-position
    tag: "0.11.32-6-PAGOPA-1800-fix-stamp-mapping"
    pullPolicy: Always
  livenessProbe:
    httpGet:
      path: /actuator/health/liveness
      port: 8080
    initialDelaySeconds: 15
    failureThreshold: 10
    periodSeconds: 5
  readinessProbe:
    httpGet:
      path: /actuator/health/readiness
      port: 8080
    initialDelaySeconds: 15
    failureThreshold: 10
    periodSeconds: 5
  deployment:
    create: true
  service:
    create: true
    type: ClusterIP
    ports:
      - 8080
  ingress:
    create: true
    host: "weuprod.gps.internal.platform.pagopa.it"
    path: /pagopa-gpd-core/(.*)
    servicePort: 8080
  serviceAccount:
    create: false
    annotations: {}
    name: ""
  podAnnotations: {}
  podSecurityContext:
    seccompProfile:
      type: RuntimeDefault
  securityContext:
    allowPrivilegeEscalation: false
  resources:
    requests:
      memory: "1024Mi"
      cpu: "0.75"
    limits:
      memory: "1024Mi"
      cpu: "0.75"
  autoscaling:
    enable: true
    minReplica: 3
    maxReplica: 10
    pollingInterval: 1 # seconds
    cooldownPeriod: 50 # seconds
    triggers:
      - type: cpu
        metadata:
          # Required
          type: Utilization # Allowed types are 'Utilization' or 'AverageValue'
          value: "75"
          # - type: metrics-api
          #   metadata:
          #     targetValue: "50" # milliseconds
          #     url: "https://weuprod.gps.internal.platform.pagopa.it/pagopa-gpd-core/actuator/metrics/http.server.requests.percentile?tag=phi:0.99"
          #     valueLocation: "measurements.0.value"
    advanced:
      horizontalPodAutoscalerConfig:
        behavior:
          scaleDown:
            # https://github.com/kubernetes/enhancements/blob/master/keps/sig-autoscaling/853-configurable-hpa-scale-velocity/README.md#stabilization-window
            stabilizationWindowSeconds: 300
            policies:
              - type: Pods
                value: 1
                periodSeconds: 20
          scaleUp:
            stabilizationWindowSeconds: 0
            policies:
              - type: Pods
                value: 2
                periodSeconds: 20
  envConfig:
    WEBSITE_SITE_NAME: 'pagopa-p-gpd-core-service'
    ENV: 'Azure Kubernetes'
    SPRING_DATASOURCE_URL: "jdbc:postgresql://gpd-db.p.internal.postgresql.pagopa.it:6432/apd?sslmode=require&prepareThreshold=0"
    SPRING_DATASOURCE_TYPE: "org.springframework.jdbc.datasource.SimpleDriverDataSource"
    SPRING_JPA_HIBERNATE_DDL_AUTO: "validate"
    SPRING_JPA_HIBERNATE_SHOW_SQL: "false"
    SCHEMA_NAME: "apd"
    CRON_JOB_SCHEDULE_ENABLED: "true"
    CRON_JOB_SCHEDULE_EXPRESSION_TO_VALID: "0 0 11,21 * * *" # 11, 21 (UTC+00) o'clock of every day.
    CRON_JOB_SCHEDULE_EXPRESSION_TO_EXPIRED: "0 30 11,21 * * *" # 11:30, 21:30 (UTC+00) o'clock of every day.
    CRON_JOB_SCHEDULE_HISTORY_ENABLED: "false"
    CRON_JOB_SCHEDULE_HISTORY_TRIGGER: "0 0 1 * * *"
    CRON_JOB_SCHEDULE_HISTORY_QUERY: "SELECT pp FROM PaymentPosition pp WHERE pp.status IN ('PAID', 'REPORTED', 'INVALID', 'EXPIRED') AND pp.lastUpdatedDate < ?1"
    CRON_JOB_SCHEDULE_HISTORY_PAGINATED: "true"
    CRON_JOB_SCHEDULE_HISTORY_QUERY_COUNT: "SELECT count(pp.id) FROM PaymentPosition pp WHERE pp.status IN ('PAID', 'REPORTED', 'INVALID', 'EXPIRED') AND pp.lastUpdatedDate < ?1"
    CRON_JOB_SCHEDULE_HISTORY_QUERY_PAGE_SIZE: "10000"
    CRON_JOB_SCHEDULE_HISTORY_QUERY_INTERVAL: "365"
    CRON_JOB_SCHEDULE_HISTORY_SHEDLOCK_DEFAULTLOCKATMOSTFOR: "5m"
    CRON_JOB_SCHEDULE_HISTORY_SHEDLOCK_LOCKATMOSTFOR: "240m"
    CRON_JOB_SCHEDULE_HISTORY_SHEDLOCK_LOCKATLEASTFOR: "5m"
    GPD_ARCHIVE_SA_PP_TABLE: "paymentpositiontable"
    GPD_ARCHIVE_BATCH_OPERATION_SIZE: "1000"
    AUX_DIGIT: "3"
    NODE_HOST: "https://api.platform.pagopa.it/"
    NODE_CHECK_POSITION_PATH: "/nodo/nodo-per-pm/v1/checkPosition"
    NODE_CONNECTION_TIMEOUT: "3000"
    RETRY_MAX_DELAY: "2000"
    RETRY_MAX_ATTEMPTS: "1"
    LOG_LEVEL: "INFO"
    SQL_LOG_LEVEL: "INFO"
    SQL_BINDER_LOG_LEVEL: "INFO"
    MAX_DEBT_POSITIONS: "100"
    OTEL_SERVICE_NAME: "pagopa-gpd-core"
    OTEL_RESOURCE_ATTRIBUTES: "service.name=pagopa-gpd-core,deployment.environment=prod"
    OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector.elastic-system.svc:4317"
    OTEL_LOGS_EXPORTER: none
    OTEL_TRACES_SAMPLER: "always_on"
  envSecret:
    # required
    APPLICATIONINSIGHTS_CONNECTION_STRING: 'ai-p-connection-string'
    OTEL_EXPORTER_OTLP_HEADERS: elastic-apm-secret-token
    SPRING_DATASOURCE_PASSWORD: "db-apd-user-password"
    SPRING_DATASOURCE_USERNAME: "db-apd-user-name"
    NODE_SUBSCRIPTION_KEY: "gpd-p-node-subscription-key"
    GPD_ARCHIVE_SA_CONNECTION_STRING: "gpd-archive-p-sa-connection-string"
  keyvault:
    name: "pagopa-p-gps-kv"
    tenantId: "7788edaf-0346-4068-9d79-c868aed15b3d"
  nodeSelector: {}
  tolerations: []
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node_type
                operator: In
                values:
                  - user
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/instance: gpd-core
            namespaces: ["gps"]
            topologyKey: topology.kubernetes.io/zone
  canaryDelivery:
    create: false
    ingress:
      create: true
      canary:
        type: header
        headerName: X-Canary
        headerValue: canary
        weightPercent: 0
    service:
      create: true
    deployment:
      create: true
      image:
        repository: ghcr.io/pagopa/pagopa-debt-position
        tag: "0.9.0"
        pullPolicy: Always
      envConfig: {}
      envSecret: {}

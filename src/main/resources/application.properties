# info
info.application.name=@project.artifactId@
info.application.version=@project.version@
info.application.description=@project.description@
info.properties.environment=${ENV:na}

# Actuator
management.endpoints.web.exposure.include=health  
management.info.env.enabled=false
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
# Do not show details of health endpoint
management.endpoint.health.show-details=never

# MVC
spring.mvc.log-resolved-exception=false

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.type=${SPRING_DATASOURCE_TYPE}

spring.jpa.properties.hibernate.default_schema=${SCHEMA_NAME}

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = ${SPRING_JPA_HIBERNATE_DDL_AUTO}
spring.jpa.hibernate.show-sql = ${SPRING_JPA_HIBERNATE_SHOW_SQL}

# Scheduling configuration: change status
cron.job.schedule.enabled = ${CRON_JOB_SCHEDULE_ENABLED}
cron.job.schedule.expression.valid.status = ${CRON_JOB_SCHEDULE_EXPRESSION_TO_VALID}
cron.job.schedule.expression.expired.status = ${CRON_JOB_SCHEDULE_EXPRESSION_TO_EXPIRED}
# Scheduling configuration: archive debt positions
cron.job.schedule.history.enabled = ${CRON_JOB_SCHEDULE_HISTORY_ENABLED}
cron.job.schedule.history.trigger = ${CRON_JOB_SCHEDULE_HISTORY_TRIGGER}
cron.job.schedule.history.query = ${CRON_JOB_SCHEDULE_HISTORY_QUERY}
cron.job.schedule.history.paginated = ${CRON_JOB_SCHEDULE_HISTORY_PAGINATED}
# The number of records extracted each time the query runs. The parameter is used only if pagination mode is true (default 100.000)
cron.job.schedule.history.query.page.size = ${CRON_JOB_SCHEDULE_HISTORY_QUERY_PAGE_SIZE}
# The query to get the number of total records to be extracted in paginated mode. The parameter is used only if pagination mode is true
cron.job.schedule.history.query.count = ${CRON_JOB_SCHEDULE_HISTORY_QUERY_COUNT}
# The time, in days, to be subtracted from the current date to decide how old, the debt positions to be historicized, must be (default 365 days)
cron.job.schedule.history.query.interval = ${CRON_JOB_SCHEDULE_HISTORY_QUERY_INTERVAL}

cron.job.schedule.history.shedlock.defaultlockatmostfor = ${CRON_JOB_SCHEDULE_HISTORY_SHEDLOCK_DEFAULTLOCKATMOSTFOR}
cron.job.schedule.history.shedlock.lockatmostfor = ${CRON_JOB_SCHEDULE_HISTORY_SHEDLOCK_LOCKATMOSTFOR}
cron.job.schedule.history.shedlock.lockatleastfor = ${CRON_JOB_SCHEDULE_HISTORY_SHEDLOCK_LOCKATLEASTFOR}

azure.archive.storage.connection=${GPD_ARCHIVE_SA_CONNECTION_STRING}
azure.archive.storage.table.pp=${GPD_ARCHIVE_SA_PP_TABLE}
azure.archive.storage.batch.operation.size=${GPD_ARCHIVE_BATCH_OPERATION_SIZE}

# Max num. of days for the recovery of debt positions
max.days.interval = ${MAX_DAYS_INTERVAL:#{'30'}}

# AUX_DIGIT is a numerical value that defines the structure of the IUV and contributes to the generation of the Numero Avviso (NAV)
nav.aux.digit = ${AUX_DIGIT:#{'3'}}

# logging level settings
# logging.level.root=DEBUG
# logging.level.org.springframework.web=DEBUG
logging.level.root=${LOG_LEVEL}
logging.level.org.springframework.web=${LOG_LEVEL}
logging.level.org.hibernate=${LOG_LEVEL}
logging.level.org.hibernate.SQL=${SQL_LOG_LEVEL}
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=${SQL_BINDER_LOG_LEVEL}

# hikari pool
logging.level.com.zaxxer.hikari.HikariConfig=${LOG_LEVEL}
logging.level.com.zaxxer.hikari=${LOG_LEVEL}

# https://github.com/brettwooldridge/HikariCP?tab=readme-ov-file#gear-configuration-knobs-baby
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.max-lifetime=30000
spring.datasource.hikari.connection-test-query=${HEALTHCHECK_QUERY:select 1}

# Flyway settings
spring.flyway.enabled=false
spring.flyway.schemas=${SCHEMA_NAME}

# Client and Feign settings
service.node.host=${NODE_HOST}
service.check.position.path=${NODE_CHECK_POSITION_PATH:#{'/nodo-auth/nodo-per-pm/v1/checkPosition'}}
node.subscription-key=${NODE_SUBSCRIPTION_KEY}
feign.client.config.default.connect-timeout=${NODE_CONNECTION_TIMEOUT}
feign.client.config.default.read-timeout=${NODE_CONNECTION_TIMEOUT}
service.send.host=${SEND_HOST}
service.get.notification.fee.path=${NOTIFICATION_PRICE_PATH:#{'/delivery/v2.3/price/{paTaxId}/{noticeCode}'}}
send.subscription-key=${SEND_SUBSCRIPTION_KEY}

# Retry settings
retry.maxAttempts=${RETRY_MAX_ATTEMPTS}
retry.maxDelay=${RETRY_MAX_DELAY}
send.retry.maxAttempts=${RETRY_MAX_ATTEMPTS:#{'1'}}
send.retry.maxDelay=${RETRY_MAX_DELAY:#{'1000'}}


# Max num. of debt positions in massive loading
max.massive.debt.positions = ${MAX_DEBT_POSITIONS:#{'100'}}

# Feature flag switch_to_expired and validity_date READ
database.migration.fields.read.from=READ_FROM_PAYMENT_POSITION

# Openapi
springdoc.writer-with-order-by-keys=false
springdoc.writer-with-default-pretty-printer=true
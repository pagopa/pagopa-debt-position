{
	"info": {
		"_postman_id": "570dd32f-62e0-409a-b466-96b363d0eecc",
		"name": "DEBT_POSITION",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "api test suite - GPD",
			"item": [
				{
					"name": "info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"The response properties\", () => {\r",
									"    //parse the response JSON and test tree properties\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.name).to.eql(\"gpd\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}info",
							"host": [
								"{{gpdhost}}info"
							]
						}
					},
					"response": []
				},
				{
					"name": "createDebtPosition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.globals.set(\"creditor_saved\", pm.globals.get(\"creditor_institution_code\"));",
									"pm.globals.set(\"iupd_saved\", pm.globals.get(\"iupd\"));",
									"",
									"//console.log(pm.globals.get(\"creditor_saved\"))",
									"//postman.setNextRequest(\"createDebtPosition_409_DuplicatedIUV_sameDebtPos\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"iupd\": \"{{iupd}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"02\",\r\n          \"amount\": 2000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_institution_code}}/debtpositions",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_institution_code}}",
								"debtpositions"
							]
						}
					},
					"response": []
				},
				{
					"name": "createNewDebtPositionSameOrganization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"pm.globals.set(\"iupd_saved_2\", pm.globals.get(\"iupd2\"));",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"iupd\": \"{{iupd2}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"02\",\r\n          \"amount\": 2000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateDebtPosition (add transfer to payment option)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"iupd\": \"{{iupd_saved}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"02\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"03\",\r\n          \"amount\": 500,\r\n          \"remittanceInformation\": \"remittanceInformation 3\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								"{{iupd_saved}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateDebtPosition (add payment option)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"iupd\": \"{{iupd_saved}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"02\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"03\",\r\n          \"amount\": 500,\r\n          \"remittanceInformation\": \"remittanceInformation 3\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"iuv\": \"{{iuv2}}\",\r\n      \"amount\": 5000,\r\n      \"description\": \"TARI comune di ROMA\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 5000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								"{{iupd_saved}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateDebtPosition (remove transfer from payment option)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"iupd\": \"{{iupd_saved}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 9500,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								"{{iupd_saved}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "createDebtPosition_multiOptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"pm.globals.set(\"creditor_saved_multi\", pm.globals.get(\"creditor_institution_code\"));",
									"pm.globals.set(\"iupd_saved_multi\", pm.globals.get(\"iupd\"));",
									"pm.globals.set(\"iuv_saved_multi_total\", pm.globals.get(\"iuv1\"));",
									"pm.globals.set(\"iuv_saved_multi_partial_1\", pm.globals.get(\"iuv2\"));",
									"pm.globals.set(\"iuv_saved_multi_partial_2\", pm.globals.get(\"iuv3\"));",
									"pm.globals.set(\"txid_saved_1\", pm.globals.get(\"txid1\"));",
									"pm.globals.set(\"txid_saved_2\", pm.globals.get(\"txid2\"));",
									"pm.globals.set(\"txid_saved_3\", pm.globals.get(\"txid3\"));",
									"pm.globals.set(\"txid_saved_4\", pm.globals.get(\"txid4\"));",
									"pm.globals.set(\"txid_saved_5\", pm.globals.get(\"txid5\"));",
									"pm.globals.set(\"txid_saved_6\", pm.globals.get(\"txid6\"));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"iupd\": \"{{iupd}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv1}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 1 FINAL\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"{{txid1}}\",\r\n          \"amount\": 9000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"{{txid2}}\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"iuv\": \"{{iuv2}}\",\r\n      \"amount\": 5000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 2 NOT FINAL\",\r\n      \"isPartialPayment\": true,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"{{txid3}}\",\r\n          \"amount\": 4000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"{{txid4}}\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"iuv\": \"{{iuv3}}\",\r\n      \"amount\": 5000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 3 NOT FINAL\",\r\n      \"isPartialPayment\": true,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"{{txid5}}\",\r\n          \"amount\": 4000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"{{txid6}}\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_institution_code}}/debtpositions",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_institution_code}}",
								"debtpositions"
							]
						}
					},
					"response": []
				},
				{
					"name": "getOrganizationDebtPositions_no_filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test tree properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.payment_position_list).to.have.lengthOf(2);",
									"    pm.expect(responseJson.payment_position_list[0].paymentOption).to.have.lengthOf(1);",
									"    pm.expect(responseJson.payment_position_list[0].organizationFiscalCode).to.eql(pm.globals.get(\"creditor_saved\"));",
									"    pm.expect(responseJson.payment_position_list[0].status).to.eql(\"DRAFT\");",
									"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.be.a('boolean');",
									"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.eql(false);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/?page=0",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getOrganizationDebtPositions_orderBy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test tree properties",
									"    ",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.payment_position_list).to.have.lengthOf(2);",
									"    pm.expect(responseJson.payment_position_list[0].paymentOption).to.have.lengthOf(1);",
									"    pm.expect(responseJson.payment_position_list[0].organizationFiscalCode).to.eql(pm.globals.get(\"creditor_saved\"));",
									"    pm.expect(responseJson.payment_position_list[0].status).to.eql(\"DRAFT\");",
									"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.be.a('boolean');",
									"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.eql(false);",
									"    pm.expect(responseJson.payment_position_list[0].iupd).to.eql(pm.globals.get(\"iupd_saved\"));",
									"",
									"    pm.expect(responseJson.payment_position_list[1].paymentOption).to.have.lengthOf(1);",
									"    pm.expect(responseJson.payment_position_list[1].organizationFiscalCode).to.eql(pm.globals.get(\"creditor_saved\"));",
									"    pm.expect(responseJson.payment_position_list[1].status).to.eql(\"DRAFT\");",
									"    pm.expect(responseJson.payment_position_list[1].paymentOption[0].isPartialPayment).to.be.a('boolean');",
									"    pm.expect(responseJson.payment_position_list[1].paymentOption[0].isPartialPayment).to.eql(false);",
									"    pm.expect(responseJson.payment_position_list[1].iupd).to.eql(pm.globals.get(\"iupd_saved_2\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/?page=0&orderby=INSERTED_DATE&ordering=ASC",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "orderby",
									"value": "INSERTED_DATE"
								},
								{
									"key": "ordering",
									"value": "ASC"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getOrganizationDebtPositions_filter_by_duedate_from",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.payment_position_list).to.have.lengthOf(2);",
									"    pm.expect(responseJson.payment_position_list[0].paymentOption).to.have.lengthOf(1);",
									"    pm.expect(responseJson.payment_position_list[0].organizationFiscalCode).to.eql(pm.globals.get(\"creditor_saved\"));",
									"    pm.expect(responseJson.payment_position_list[0].status).to.eql(\"DRAFT\");",
									"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.be.a('boolean');",
									"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.eql(false);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/?page=0&due_date_from={{now_date}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "due_date_from",
									"value": "{{now_date}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getOrganizationDebtPositions_filter_by_duedate_to",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.payment_position_list).to.have.lengthOf(0);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/?page=0&due_date_to={{now_date}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								""
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "due_date_to",
									"value": "{{now_date}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getPositionByIUPD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.paymentOption).to.have.lengthOf(1);",
									"    pm.expect(responseJson.iupd).to.eql(pm.globals.get(\"iupd_saved\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								"{{iupd_saved}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPaymentOptionByIUV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.transfer).to.have.lengthOf(2);",
									"    pm.expect(responseJson.iuv).to.eql(pm.globals.get(\"iuv_saved_multi_total\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_total}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_saved_multi_total}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "publishDebtPosition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}/publish",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								"{{iupd_saved}}",
								"publish"
							]
						}
					},
					"response": []
				},
				{
					"name": "publishDebtPosition_multiOption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}/publish",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"debtpositions",
								"{{iupd_saved_multi}}",
								"publish"
							]
						}
					},
					"response": []
				},
				{
					"name": "payPaymentOption_partial_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"PO_PAID\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"paymentDate\": \"{{payment_date}}\",\r\n  \"paymentMethod\": \"bonifico\",\r\n  \"pspCompany\": \"Intesa San Paolo\",\r\n  \"idReceipt\": \"TRN123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_1}}/pay",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_saved_multi_partial_1}}",
								"pay"
							]
						}
					},
					"response": []
				},
				{
					"name": "payPaymentOption_partial_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"PO_PAID\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"paymentDate\": \"{{payment_date}}\",\r\n  \"paymentMethod\": \"bonifico\",\r\n  \"pspCompany\": \"Intesa San Paolo\",\r\n  \"idReceipt\": \"TRN123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_2}}/pay",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_saved_multi_partial_2}}",
								"pay"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPositionByIUPD_Multi",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.paymentOption).to.have.lengthOf(3);",
									"    pm.expect(responseJson.iupd).to.eql(pm.globals.get(\"iupd_saved_multi\"));",
									"    pm.expect(responseJson.paymentOption[0].iuv).to.eql(pm.globals.get(\"iuv_saved_multi_total\"));",
									"    pm.expect(responseJson.paymentOption[0].isPartialPayment).to.eql(false);",
									"    pm.expect(responseJson.paymentOption[0].status).to.eql(\"PO_UNPAID\");",
									"    pm.expect(responseJson.paymentOption[1].iuv).to.eql(pm.globals.get(\"iuv_saved_multi_partial_1\"));",
									"    pm.expect(responseJson.paymentOption[1].isPartialPayment).to.eql(true);",
									"    pm.expect(responseJson.paymentOption[1].status).to.eql(\"PO_PAID\");",
									"    pm.expect(responseJson.paymentOption[2].iuv).to.eql(pm.globals.get(\"iuv_saved_multi_partial_2\"));",
									"    pm.expect(responseJson.paymentOption[2].isPartialPayment).to.eql(true);",
									"    pm.expect(responseJson.paymentOption[2].status).to.eql(\"PO_PAID\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"debtpositions",
								"{{iupd_saved_multi}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "reportTransfer_partial_1_txid3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"T_REPORTED\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_1}}/transfers/{{txid_saved_3}}/report",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_saved_multi_partial_1}}",
								"transfers",
								"{{txid_saved_3}}",
								"report"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPositionByIUPD_Check_Transfer_Partially_Reported",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.paymentOption).to.have.lengthOf(3);",
									"    pm.expect(responseJson.iupd).to.eql(pm.globals.get(\"iupd_saved_multi\"));",
									"    for (var i = 0; i < responseJson.paymentOption.length; i++) {",
									"        if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_total\")){",
									"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(false);",
									"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_UNPAID\");",
									"        }",
									"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_1\")){",
									"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
									"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_PARTIALLY_REPORTED\");",
									"        }",
									"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_2\")){",
									"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
									"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_PAID\");",
									"        }",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"debtpositions",
								"{{iupd_saved_multi}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "reportTransfer_partial_1_txid4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"T_REPORTED\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_1}}/transfers/{{txid_saved_4}}/report",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_saved_multi_partial_1}}",
								"transfers",
								"{{txid_saved_4}}",
								"report"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPositionByIUPD_Check_Transfer_Reported",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.paymentOption).to.have.lengthOf(3);",
									"    pm.expect(responseJson.iupd).to.eql(pm.globals.get(\"iupd_saved_multi\"));",
									"    for (var i = 0; i < responseJson.paymentOption.length; i++) {",
									"        if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_total\")){",
									"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(false);",
									"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_UNPAID\");",
									"        }",
									"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_1\")){",
									"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
									"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_REPORTED\");",
									"        }",
									"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_2\")){",
									"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
									"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_PAID\");",
									"        }",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"debtpositions",
								"{{iupd_saved_multi}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "reportTransfer_partial_2_txid5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"T_REPORTED\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_2}}/transfers/{{txid_saved_5}}/report",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_saved_multi_partial_2}}",
								"transfers",
								"{{txid_saved_5}}",
								"report"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPositionByIUPD_Check_Transfer_Reported_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.paymentOption).to.have.lengthOf(3);",
									"    pm.expect(responseJson.iupd).to.eql(pm.globals.get(\"iupd_saved_multi\"));",
									"    pm.expect(responseJson.status).to.eql(\"PAID\");",
									"    for (var i = 0; i < responseJson.paymentOption.length; i++) {",
									"        if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_total\")){",
									"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(false);",
									"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_UNPAID\");",
									"        }",
									"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_1\")){",
									"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
									"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_REPORTED\");",
									"        }",
									"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_2\")){",
									"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
									"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_PARTIALLY_REPORTED\");",
									"        }",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"debtpositions",
								"{{iupd_saved_multi}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "reportTransfer_partial_2_txid6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"T_REPORTED\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_2}}/transfers/{{txid_saved_6}}/report",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_saved_multi_partial_2}}",
								"transfers",
								"{{txid_saved_6}}",
								"report"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPositionByIUPD_Check_Transfer_Reported_2 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"The response properties\", () => {",
									"    //parse the response JSON and test three properties",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.paymentOption).to.have.lengthOf(3);",
									"    pm.expect(responseJson.iupd).to.eql(pm.globals.get(\"iupd_saved_multi\"));",
									"    pm.expect(responseJson.status).to.eql(\"REPORTED\");",
									"    for (var i = 0; i < responseJson.paymentOption.length; i++) {",
									"        if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_total\")){",
									"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(false);",
									"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_UNPAID\");",
									"        }",
									"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_1\")){",
									"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
									"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_REPORTED\");",
									"        }",
									"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_2\")){",
									"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
									"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_REPORTED\");",
									"        }",
									"    }",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"debtpositions",
								"{{iupd_saved_multi}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalidateDebtPosition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}/invalidate",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								"{{iupd_saved}}",
								"invalidate"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteDebtPosition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								"{{iupd_saved}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "api test error - GPD",
			"item": [
				{
					"name": "createDebtPosition_409_DuplicatedIUV_sameDebtPos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"iupd\": \"{{iupd}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv1}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 1 FINAL\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 9000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"02\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"iuv\": \"{{iuv2}}\",\r\n      \"amount\": 5000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 2 NOT FINAL\",\r\n      \"isPartialPayment\": true,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 4000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"02\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"iuv\": \"{{iuv2}}\",\r\n      \"amount\": 5000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 3 NOT FINAL\",\r\n      \"isPartialPayment\": true,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 4000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"02\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_institution_code}}/debtpositions",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_institution_code}}",
								"debtpositions"
							]
						}
					},
					"response": []
				},
				{
					"name": "createDebtPosition_400_no_fiscalCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"iupd\": \"{{iupd}}\",\r\n  \"type\": \"F\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"02\",\r\n          \"amount\": 2000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_institution_code}}/debtpositions",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_institution_code}}",
								"debtpositions"
							]
						}
					},
					"response": []
				},
				{
					"name": "createDebtPosition_400_TransferAmountsError",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"iupd\": \"{{iupd}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"02\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_institution_code}}/debtpositions",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_institution_code}}",
								"debtpositions"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteDebtPosition_404_no_iupd_existing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/{{iupd_not_existent}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								"{{iupd_not_existent}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "publishDebtPosition_404_no_iupd_existing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(404);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/{{iupd_not_existent}}/publish",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								"{{iupd_not_existent}}",
								"publish"
							]
						}
					},
					"response": []
				},
				{
					"name": "invalidateDebtPosition_404_no_iupd_existing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(404);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/debtpositions/{{iupd_not_existent}}/invalidate",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"debtpositions",
								"{{iupd_not_existent}}",
								"invalidate"
							]
						}
					},
					"response": []
				},
				{
					"name": "payPaymentOption_409_already_paid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"paymentDate\": \"{{payment_date}}\",\r\n  \"paymentMethod\": \"bonifico\",\r\n  \"pspCompany\": \"Intesa San Paolo\",\r\n  \"idReceipt\": \"TRN123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_total}}/pay",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_saved_multi_total}}",
								"pay"
							]
						}
					},
					"response": []
				},
				{
					"name": "payPaymentOption_400_bad_request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"paymentMethod\": \"bonifico\",\r\n  \"pspCompany\": \"Intesa San Paolo\",\r\n  \"idReceipt\": \"TRN123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_total}}/pay",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_saved_multi_total}}",
								"pay"
							]
						}
					},
					"response": []
				},
				{
					"name": "payPaymentOption_404_iuv_not_exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"paymentDate\": \"{{payment_date}}\",\r\n  \"paymentMethod\": \"bonifico\",\r\n  \"pspCompany\": \"Intesa San Paolo\",\r\n  \"idReceipt\": \"TRN123456789\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_not_existent}}/pay",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_not_existent}}",
								"pay"
							]
						}
					},
					"response": []
				},
				{
					"name": "reportTransfer_T_REPORTED_txid5_409",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_2}}/transfers/{{txid_saved_5}}/report",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_saved_multi_partial_2}}",
								"transfers",
								"{{txid_saved_5}}",
								"report"
							]
						}
					},
					"response": []
				},
				{
					"name": "reportTransfer_PO_UNPAID_txid1_409",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(409);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_total}}/transfers/{{txid_saved_1}}/report",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_saved_multi_total}}",
								"transfers",
								"{{txid_saved_1}}",
								"report"
							]
						}
					},
					"response": []
				},
				{
					"name": "reportTransfer_PO_REPORTED_txid3_409",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(409);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_1}}/transfers/{{txid_saved_3}}/report",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_saved_multi_partial_1}}",
								"transfers",
								"{{txid_saved_3}}",
								"report"
							]
						}
					},
					"response": []
				},
				{
					"name": "reportTransfer_txid_not_existent_404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_1}}/transfers/{{txid_not_existent}}/report",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"paymentoptions",
								"{{iuv_saved_multi_partial_1}}",
								"transfers",
								"{{txid_not_existent}}",
								"report"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateDebtPosition_400_iupd_mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"iupd\": \"{{iupd_not_existent}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"02\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"03\",\r\n          \"amount\": 500,\r\n          \"remittanceInformation\": \"remittanceInformation 3\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"debtpositions",
								"{{iupd_saved_multi}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateDebtPosition_404_iupd_mismatch_not_exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {\r",
									"  pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"iupd\": \"{{iupd_saved_multi}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"02\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"03\",\r\n          \"amount\": 500,\r\n          \"remittanceInformation\": \"remittanceInformation 3\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_not_existent}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"debtpositions",
								"{{iupd_not_existent}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateDebtPosition_400_no_body_request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(400);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"debtpositions",
								"{{iupd_saved_multi}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateDebtPosition_409_not_updatable_state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(409);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"iupd\": \"{{iupd_saved_multi}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{invalid_due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 9500,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"debtpositions",
								"{{iupd_saved_multi}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateDebtPosition_404_iupd_not_exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {\r",
									"  pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"iupd\": \"{{iupd_not_existent}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"01\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"02\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"03\",\r\n          \"amount\": 500,\r\n          \"remittanceInformation\": \"remittanceInformation 3\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_not_existent}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved_multi}}",
								"debtpositions",
								"{{iupd_not_existent}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPaymentOptionByIUV_404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gpdhost}}organizations/{{creditor_saved}}/paymentoptions/{{iuv_not_existent}}",
							"host": [
								"{{gpdhost}}organizations"
							],
							"path": [
								"{{creditor_saved}}",
								"paymentoptions",
								"{{iuv_not_existent}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"function getDateNowISOAddMin(minutesToAdd) {",
					"    const currentDate = new Date();",
					"    const date = new Date(currentDate.getTime() + minutesToAdd*60000);",
					"    return date.toISOString();    ",
					"}",
					"",
					"function getDateNowISOSubMin(minutesToSub) {",
					"    const currentDate = new Date();",
					"    const date = new Date(currentDate.getTime() - minutesToSub*60000);",
					"    return date.toISOString();    ",
					"}",
					"",
					"",
					"Date.prototype.addDays = function(days) {",
					"    var date = new Date(this.valueOf());",
					"    date.setDate(date.getDate() + days);",
					"    return date;",
					"}",
					"",
					"var date = new Date();",
					"console.log(date.addDays(5));",
					"",
					"",
					"function makeidMix(length) {",
					"    var result           = '';",
					"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"    var charactersLength = characters.length;",
					"    for ( var i = 0; i < length; i++ ) {",
					"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"    }",
					"    return result;",
					"}",
					"",
					"function makeidNumber(length) {",
					"    var result           = '';",
					"    var characters       = '0123456789';",
					"    var charactersLength = characters.length;",
					"    for ( var i = 0; i < length; i++ ) {",
					"      result += characters.charAt(Math.floor(Math.random() * ",
					" charactersLength));",
					"   }",
					"   return result;",
					"}",
					"",
					"Date.prototype.subDays = function(days) {",
					"    var date = new Date(this.valueOf());",
					"    date.setDate(date.getDate() - days);",
					"    return date;",
					"}",
					"",
					"// set global vars",
					"pm.globals.set(\"creditor_institution_code\", makeidNumber(11));",
					"pm.globals.set(\"iupd\", makeidMix(35));",
					"pm.globals.set(\"iupd2\", makeidMix(35));",
					"pm.globals.set(\"iuv\", makeidMix(35));",
					"pm.globals.set(\"iuv1\", makeidMix(35));",
					"pm.globals.set(\"iuv2\", makeidMix(35));",
					"pm.globals.set(\"iuv3\", makeidMix(35));",
					"",
					"pm.globals.set(\"txid1\", makeidMix(35))",
					"pm.globals.set(\"txid2\", makeidMix(35))",
					"pm.globals.set(\"txid3\", makeidMix(35))",
					"pm.globals.set(\"txid4\", makeidMix(35))",
					"pm.globals.set(\"txid5\", makeidMix(35))",
					"pm.globals.set(\"txid6\", makeidMix(35))",
					"",
					"pm.globals.set(\"validity_date\", new Date().addDays(10));",
					"pm.globals.set(\"due_date\", new Date().addDays(30));",
					"pm.globals.set(\"retention_date\", new Date().addDays(90));",
					"pm.globals.set(\"invalid_due_date\", new Date().subDays(5));",
					"pm.globals.set(\"payment_date\", getDateNowISOSubMin(15));",
					"",
					"pm.globals.set(\"now_date\", new Date().toISOString().split('T')[0]);",
					"pm.globals.set(\"iupd_not_existent\", \"FAKEIUPD_\"+makeidMix(35));",
					"pm.globals.set(\"iuv_not_existent\", \"FAKEIUV_\"+makeidMix(35));",
					"pm.globals.set(\"txid_not_existent\", \"FAKETxID_\" +makeidMix(35))",
					"",
					"//pm.globals.set(\"iuv_tipo\", _.random(0, 6));",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
{
	"info": {
		"_postman_id": "2bb99765-32bd-4284-a7c9-e2d51133e679",
		"name": "Debt Position",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "205220"
	},
	"item": [
		{
			"name": "gpd",
			"item": [
				{
					"name": "api test suite",
					"item": [
						{
							"name": "info",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The response properties\", () => {\r",
											"    //parse the response JSON and test tree properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.name).to.eql(\"gpd\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/info",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "createDebtPosition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(201);",
											"  const responseJson = pm.response.json();",
											"  pm.globals.set(\"iuv_saved\", responseJson.paymentOption[0].iuv);",
											"});",
											"",
											"pm.globals.set(\"creditor_saved\", pm.globals.get(\"creditor_institution_code\"));",
											"pm.globals.set(\"iupd_saved\", pm.globals.get(\"iupd\"));",
											"",
											"",
											"//console.log(pm.globals.get(\"creditor_saved\"))",
											"//postman.setNextRequest(\"createDebtPosition_409_DuplicatedIUV_sameDebtPos\");",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 2000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_institution_code}}/debtpositions",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_institution_code}}",
										"debtpositions"
									]
								}
							},
							"response": []
						},
						{
							"name": "createNewDebtPositionSameOrganization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"pm.globals.set(\"iupd_saved_2\", pm.globals.get(\"iupd2\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd2}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 2000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateDebtPosition (add transfer to payment option)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd_saved}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"3\",\r\n          \"amount\": 500,\r\n          \"remittanceInformation\": \"remittanceInformation 3\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										"{{iupd_saved}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateDebtPosition (add payment option)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd_saved}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"3\",\r\n          \"amount\": 500,\r\n          \"remittanceInformation\": \"remittanceInformation 3\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"iuv\": \"{{iuv2}}\",\r\n      \"amount\": 5000,\r\n      \"description\": \"TARI comune di ROMA\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 5000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										"{{iupd_saved}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateDebtPosition (remove transfer from payment option)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd_saved}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 9500,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										"{{iupd_saved}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "createDebtPosition_multiOptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"pm.globals.set(\"creditor_saved_multi\", pm.globals.get(\"creditor_institution_code\"));",
											"pm.globals.set(\"iupd_saved_multi\", pm.globals.get(\"iupd\"));",
											"pm.globals.set(\"iuv_saved_multi_total\", pm.globals.get(\"iuv1\"));",
											"pm.globals.set(\"iuv_saved_multi_partial_1\", pm.globals.get(\"iuv2\"));",
											"pm.globals.set(\"iuv_saved_multi_partial_2\", pm.globals.get(\"iuv3\"));",
											"pm.globals.set(\"txid_saved_1\", pm.globals.get(\"txid1\"));",
											"pm.globals.set(\"txid_saved_2\", pm.globals.get(\"txid2\"));",
											"pm.globals.set(\"txid_saved_3\", pm.globals.get(\"txid3\"));",
											"pm.globals.set(\"txid_saved_4\", pm.globals.get(\"txid4\"));",
											"pm.globals.set(\"txid_saved_5\", pm.globals.get(\"txid5\"));",
											"pm.globals.set(\"txid_saved_6\", pm.globals.get(\"txid6\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv1}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 1 FINAL\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"{{txid1}}\",\r\n          \"amount\": 9000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"{{txid2}}\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"iuv\": \"{{iuv2}}\",\r\n      \"amount\": 5000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 2 NOT FINAL\",\r\n      \"isPartialPayment\": true,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"{{txid3}}\",\r\n          \"amount\": 4000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"{{txid4}}\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"iuv\": \"{{iuv3}}\",\r\n      \"amount\": 5000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 3 NOT FINAL\",\r\n      \"isPartialPayment\": true,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"{{txid5}}\",\r\n          \"amount\": 4000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"{{txid6}}\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_institution_code}}/debtpositions",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_institution_code}}",
										"debtpositions"
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrganizationDebtPositions_orderBy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test tree properties",
											"    ",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.payment_position_list).to.have.lengthOf(2);",
											"    pm.expect(responseJson.payment_position_list[0].paymentOption).to.have.lengthOf(1);",
											"    pm.expect(responseJson.payment_position_list[0].organizationFiscalCode).to.eql(pm.globals.get(\"creditor_saved\"));",
											"    pm.expect(responseJson.payment_position_list[0].status).to.eql(\"DRAFT\");",
											"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.be.a('boolean');",
											"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.eql(false);",
											"    pm.expect(responseJson.payment_position_list[0].iupd).to.eql(pm.globals.get(\"iupd_saved\"));",
											"",
											"    pm.expect(responseJson.payment_position_list[1].paymentOption).to.have.lengthOf(1);",
											"    pm.expect(responseJson.payment_position_list[1].organizationFiscalCode).to.eql(pm.globals.get(\"creditor_saved\"));",
											"    pm.expect(responseJson.payment_position_list[1].status).to.eql(\"DRAFT\");",
											"    pm.expect(responseJson.payment_position_list[1].paymentOption[0].isPartialPayment).to.be.a('boolean');",
											"    pm.expect(responseJson.payment_position_list[1].paymentOption[0].isPartialPayment).to.eql(false);",
											"    pm.expect(responseJson.payment_position_list[1].iupd).to.eql(pm.globals.get(\"iupd_saved_2\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/?page=0&due_date_from={{now_date}}&due_date_to={{now_date_more_30_days}}&orderby=INSERTED_DATE&ordering=ASC",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "due_date_from",
											"value": "{{now_date}}"
										},
										{
											"key": "due_date_to",
											"value": "{{now_date_more_30_days}}"
										},
										{
											"key": "orderby",
											"value": "INSERTED_DATE"
										},
										{
											"key": "ordering",
											"value": "ASC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrganizationDebtPositions_defaultOrder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test three properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.payment_position_list).to.have.lengthOf(2);",
											"    pm.expect(responseJson.payment_position_list[0].paymentOption).to.have.lengthOf(1);",
											"    pm.expect(responseJson.payment_position_list[0].organizationFiscalCode).to.eql(pm.globals.get(\"creditor_saved\"));",
											"    pm.expect(responseJson.payment_position_list[0].status).to.eql(\"DRAFT\");",
											"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.be.a('boolean');",
											"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.eql(false);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/?page=0&due_date_from={{now_date}}&due_date_to={{now_date_more_30_days}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "due_date_from",
											"value": "{{now_date}}"
										},
										{
											"key": "due_date_to",
											"value": "{{now_date_more_30_days}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrganizationDebtPositions_firstPage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test three properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.payment_position_list).to.have.lengthOf(1);",
											"    pm.expect(responseJson.payment_position_list[0].paymentOption).to.have.lengthOf(1);",
											"    pm.expect(responseJson.payment_position_list[0].organizationFiscalCode).to.eql(pm.globals.get(\"creditor_saved\"));",
											"    pm.expect(responseJson.payment_position_list[0].status).to.eql(\"DRAFT\");",
											"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.be.a('boolean');",
											"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.eql(false);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/?page=0&due_date_from={{now_date}}&due_date_to={{now_date_more_30_days}}&limit=1",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "due_date_from",
											"value": "{{now_date}}"
										},
										{
											"key": "due_date_to",
											"value": "{{now_date_more_30_days}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrganizationDebtPositions_secondPage",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test three properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.payment_position_list).to.have.lengthOf(1);",
											"    pm.expect(responseJson.payment_position_list[0].paymentOption).to.have.lengthOf(1);",
											"    pm.expect(responseJson.payment_position_list[0].organizationFiscalCode).to.eql(pm.globals.get(\"creditor_saved\"));",
											"    pm.expect(responseJson.payment_position_list[0].status).to.eql(\"DRAFT\");",
											"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.be.a('boolean');",
											"    pm.expect(responseJson.payment_position_list[0].paymentOption[0].isPartialPayment).to.eql(false);",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/?page=1&due_date_from={{now_date}}&due_date_to={{now_date_more_30_days}}&limit=1",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "due_date_from",
											"value": "{{now_date}}"
										},
										{
											"key": "due_date_to",
											"value": "{{now_date_more_30_days}}"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPositionByIUPD",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test three properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.paymentOption).to.have.lengthOf(1);",
											"    pm.expect(responseJson.iupd).to.eql(pm.globals.get(\"iupd_saved\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										"{{iupd_saved}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentOptionByIUV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test three properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.transfer).to.have.lengthOf(2);",
											"    pm.expect(responseJson.iuv).to.eql(pm.globals.get(\"iuv_saved_multi_total\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_total}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_saved_multi_total}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrganizations_by_current_date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test tree properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.add.length).to.be.above(0);",
											"    pm.expect(responseJson.delete.length).to.be.eql(0);",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations?since={{now_date}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations"
									],
									"query": [
										{
											"key": "since",
											"value": "{{now_date}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "publishDebtPosition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}/publish",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										"{{iupd_saved}}",
										"publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "publishDebtPosition_multiOption",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}/publish",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions",
										"{{iupd_saved_multi}}",
										"publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "payPaymentOption_partial_1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.status).to.eql(\"PO_PAID\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"paymentDate\": \"{{payment_date}}\",\r\n  \"paymentMethod\": \"bonifico\",\r\n  \"pspCompany\": \"Intesa San Paolo\",\r\n  \"idReceipt\": \"TRN123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_1}}/pay",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_saved_multi_partial_1}}",
										"pay"
									]
								}
							},
							"response": []
						},
						{
							"name": "payPaymentOption_partial_2_onlyPspCompany",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.status).to.eql(\"PO_PAID\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"pspCompany\": \"Intesa San Paolo\",\r\n  \"idReceipt\": \"TRN123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_2}}/pay",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_saved_multi_partial_2}}",
										"pay"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPositionByIUPD_Multi",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test three properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.paymentOption).to.have.lengthOf(3);",
											"    pm.expect(responseJson.iupd).to.eql(pm.globals.get(\"iupd_saved_multi\"));",
											"    pm.expect(responseJson.paymentOption[0].iuv).to.eql(pm.globals.get(\"iuv_saved_multi_total\"));",
											"    pm.expect(responseJson.paymentOption[0].isPartialPayment).to.eql(false);",
											"    pm.expect(responseJson.paymentOption[0].status).to.eql(\"PO_UNPAID\");",
											"    pm.expect(responseJson.paymentOption[1].iuv).to.eql(pm.globals.get(\"iuv_saved_multi_partial_1\"));",
											"    pm.expect(responseJson.paymentOption[1].isPartialPayment).to.eql(true);",
											"    pm.expect(responseJson.paymentOption[1].status).to.eql(\"PO_PAID\");",
											"    pm.expect(responseJson.paymentOption[2].iuv).to.eql(pm.globals.get(\"iuv_saved_multi_partial_2\"));",
											"    pm.expect(responseJson.paymentOption[2].isPartialPayment).to.eql(true);",
											"    pm.expect(responseJson.paymentOption[2].status).to.eql(\"PO_PAID\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions",
										"{{iupd_saved_multi}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "reportTransfer_partial_1_txid3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.status).to.eql(\"T_REPORTED\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_1}}/transfers/{{txid_saved_3}}/report",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_saved_multi_partial_1}}",
										"transfers",
										"{{txid_saved_3}}",
										"report"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPositionByIUPD_Check_Transfer_Partially_Reported",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test three properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.paymentOption).to.have.lengthOf(3);",
											"    pm.expect(responseJson.iupd).to.eql(pm.globals.get(\"iupd_saved_multi\"));",
											"    for (var i = 0; i < responseJson.paymentOption.length; i++) {",
											"        if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_total\")){",
											"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(false);",
											"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_UNPAID\");",
											"        }",
											"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_1\")){",
											"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
											"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_PARTIALLY_REPORTED\");",
											"        }",
											"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_2\")){",
											"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
											"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_PAID\");",
											"        }",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions",
										"{{iupd_saved_multi}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "reportTransfer_partial_1_txid4",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.status).to.eql(\"T_REPORTED\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_1}}/transfers/{{txid_saved_4}}/report",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_saved_multi_partial_1}}",
										"transfers",
										"{{txid_saved_4}}",
										"report"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPositionByIUPD_Check_Transfer_Reported",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test three properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.paymentOption).to.have.lengthOf(3);",
											"    pm.expect(responseJson.iupd).to.eql(pm.globals.get(\"iupd_saved_multi\"));",
											"    for (var i = 0; i < responseJson.paymentOption.length; i++) {",
											"        if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_total\")){",
											"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(false);",
											"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_UNPAID\");",
											"        }",
											"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_1\")){",
											"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
											"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_REPORTED\");",
											"        }",
											"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_2\")){",
											"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
											"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_PAID\");",
											"        }",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions",
										"{{iupd_saved_multi}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "reportTransfer_partial_2_txid5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.status).to.eql(\"T_REPORTED\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_2}}/transfers/{{txid_saved_5}}/report",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_saved_multi_partial_2}}",
										"transfers",
										"{{txid_saved_5}}",
										"report"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPositionByIUPD_Check_Transfer_Reported_2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test three properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.paymentOption).to.have.lengthOf(3);",
											"    pm.expect(responseJson.iupd).to.eql(pm.globals.get(\"iupd_saved_multi\"));",
											"    pm.expect(responseJson.status).to.eql(\"PAID\");",
											"    for (var i = 0; i < responseJson.paymentOption.length; i++) {",
											"        if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_total\")){",
											"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(false);",
											"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_UNPAID\");",
											"        }",
											"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_1\")){",
											"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
											"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_REPORTED\");",
											"        }",
											"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_2\")){",
											"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
											"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_PARTIALLY_REPORTED\");",
											"        }",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions",
										"{{iupd_saved_multi}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "reportTransfer_partial_2_txid6",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.status).to.eql(\"T_REPORTED\");",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_2}}/transfers/{{txid_saved_6}}/report",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_saved_multi_partial_2}}",
										"transfers",
										"{{txid_saved_6}}",
										"report"
									]
								}
							},
							"response": []
						},
						{
							"name": "getPositionByIUPD_Check_Transfer_Reported_2 Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"The response properties\", () => {",
											"    //parse the response JSON and test three properties",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson.paymentOption).to.have.lengthOf(3);",
											"    pm.expect(responseJson.iupd).to.eql(pm.globals.get(\"iupd_saved_multi\"));",
											"    pm.expect(responseJson.status).to.eql(\"REPORTED\");",
											"    for (var i = 0; i < responseJson.paymentOption.length; i++) {",
											"        if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_total\")){",
											"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(false);",
											"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_UNPAID\");",
											"        }",
											"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_1\")){",
											"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
											"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_REPORTED\");",
											"        }",
											"        else if (responseJson.paymentOption[i].iuv == pm.globals.get(\"iuv_saved_multi_partial_2\")){",
											"            pm.expect(responseJson.paymentOption[i].isPartialPayment).to.eql(true);",
											"            pm.expect(responseJson.paymentOption[i].status).to.eql(\"PO_REPORTED\");",
											"        }",
											"    }",
											"    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions",
										"{{iupd_saved_multi}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalidateDebtPosition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}/invalidate",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										"{{iupd_saved}}",
										"invalidate"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteDebtPosition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/{{iupd_saved}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										"{{iupd_saved}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "api test error",
					"item": [
						{
							"name": "createDebtPosition_409_DuplicatedIUV_sameDebtPos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv1}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 1 FINAL\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 9000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"iuv\": \"{{iuv2}}\",\r\n      \"amount\": 5000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 2 NOT FINAL\",\r\n      \"isPartialPayment\": true,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 4000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"iuv\": \"{{iuv2}}\",\r\n      \"amount\": 5000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 3 NOT FINAL\",\r\n      \"isPartialPayment\": true,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 4000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_institution_code}}/debtpositions",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_institution_code}}",
										"debtpositions"
									]
								}
							},
							"response": []
						},
						{
							"name": "createDebtPosition_400_no_fiscalCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd}}\",\r\n  \"type\": \"F\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 2000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_institution_code}}/debtpositions",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_institution_code}}",
										"debtpositions"
									]
								}
							},
							"response": []
						},
						{
							"name": "createDebtPosition_400_TransferAmountsError",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_institution_code}}/debtpositions",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_institution_code}}",
										"debtpositions"
									]
								}
							},
							"response": []
						},
						{
							"name": "createDebtPosition_400_IDTransferError Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"001\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"002\",\r\n          \"amount\": 2000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_institution_code}}/debtpositions",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_institution_code}}",
										"debtpositions"
									]
								}
							},
							"response": []
						},
						{
							"name": "createDebtPosition_400_NumTransfersError",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 5000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"3\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"4\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"5\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"6\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_institution_code}}/debtpositions",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_institution_code}}",
										"debtpositions"
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteDebtPosition_404_no_iupd_existing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/{{iupd_not_existent}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										"{{iupd_not_existent}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "publishDebtPosition_404_no_iupd_existing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/{{iupd_not_existent}}/publish",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										"{{iupd_not_existent}}",
										"publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalidateDebtPosition_404_no_iupd_existing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/{{iupd_not_existent}}/invalidate",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										"{{iupd_not_existent}}",
										"invalidate"
									]
								}
							},
							"response": []
						},
						{
							"name": "payPaymentOption_409_already_paid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"paymentDate\": \"{{payment_date}}\",\r\n  \"paymentMethod\": \"bonifico\",\r\n  \"pspCompany\": \"Intesa San Paolo\",\r\n  \"idReceipt\": \"TRN123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_total}}/pay",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_saved_multi_total}}",
										"pay"
									]
								}
							},
							"response": []
						},
						{
							"name": "payPaymentOption_400_bad_request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"idReceipt\": \"TRN123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_total}}/pay",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_saved_multi_total}}",
										"pay"
									]
								}
							},
							"response": []
						},
						{
							"name": "payPaymentOption_404_iuv_not_exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"paymentDate\": \"{{payment_date}}\",\r\n  \"paymentMethod\": \"bonifico\",\r\n  \"pspCompany\": \"Intesa San Paolo\",\r\n  \"idReceipt\": \"TRN123456789\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_not_existent}}/pay",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_not_existent}}",
										"pay"
									]
								}
							},
							"response": []
						},
						{
							"name": "reportTransfer_T_REPORTED_txid5_409",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_2}}/transfers/{{txid_saved_5}}/report",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_saved_multi_partial_2}}",
										"transfers",
										"{{txid_saved_5}}",
										"report"
									]
								}
							},
							"response": []
						},
						{
							"name": "reportTransfer_PO_UNPAID_txid1_409",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(409);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_total}}/transfers/{{txid_saved_1}}/report",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_saved_multi_total}}",
										"transfers",
										"{{txid_saved_1}}",
										"report"
									]
								}
							},
							"response": []
						},
						{
							"name": "reportTransfer_PO_REPORTED_txid3_409",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_1}}/transfers/{{txid_saved_3}}/report",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_saved_multi_partial_1}}",
										"transfers",
										"{{txid_saved_3}}",
										"report"
									]
								}
							},
							"response": []
						},
						{
							"name": "reportTransfer_txid_not_existent_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(404);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/paymentoptions/{{iuv_saved_multi_partial_1}}/transfers/{{txid_not_existent}}/report",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"paymentoptions",
										"{{iuv_saved_multi_partial_1}}",
										"transfers",
										"{{txid_not_existent}}",
										"report"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateDebtPosition_400_iupd_mismatch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd_not_existent}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"3\",\r\n          \"amount\": 500,\r\n          \"remittanceInformation\": \"remittanceInformation 3\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions",
										"{{iupd_saved_multi}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateDebtPosition_404_iupd_mismatch_not_exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd_saved_multi}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"3\",\r\n          \"amount\": 500,\r\n          \"remittanceInformation\": \"remittanceInformation 3\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_not_existent}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions",
										"{{iupd_not_existent}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateDebtPosition_400_no_body_request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(400);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions",
										"{{iupd_saved_multi}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateDebtPosition_409_not_updatable_state",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(409);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd_saved_multi}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{invalid_due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 9500,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions",
										"{{iupd_saved_multi}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "updateDebtPosition_404_iupd_not_exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd_not_existent}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"validityDate\": \"{{validity_date}}\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv}}\",\r\n      \"amount\": 9500,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"3\",\r\n          \"amount\": 500,\r\n          \"remittanceInformation\": \"remittanceInformation 3\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_not_existent}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions",
										"{{iupd_not_existent}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getOrganizationDebtPositions_400",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/debtpositions/?page=0&due_date_from={{now_date_more_30_days}}&due_date_to={{now_date}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"debtpositions",
										""
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "due_date_from",
											"value": "{{now_date_more_30_days}}"
										},
										{
											"key": "due_date_to",
											"value": "{{now_date}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getPaymentOptionByIUV_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(404);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved}}/paymentoptions/{{iuv_not_existent}}",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved}}",
										"paymentoptions",
										"{{iuv_not_existent}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"function getDateNowISOAddMin(minutesToAdd) {",
							"    const currentDate = new Date();",
							"    const date = new Date(currentDate.getTime() + minutesToAdd*60000);",
							"    return date.toISOString();    ",
							"}",
							"",
							"function getDateNowISOSubMin(minutesToSub) {",
							"    const currentDate = new Date();",
							"    const date = new Date(currentDate.getTime() - minutesToSub*60000);",
							"    return date.toISOString();    ",
							"}",
							"",
							"",
							"Date.prototype.addDays = function(days) {",
							"    var date = new Date(this.valueOf());",
							"    date.setDate(date.getDate() + days);",
							"    return date;",
							"}",
							"",
							"var date = new Date();",
							"console.log(date.addDays(5));",
							"",
							"",
							"function makeidMix(length) {",
							"    var result           = '';",
							"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
							"    var charactersLength = characters.length;",
							"    for ( var i = 0; i < length; i++ ) {",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
							"    }",
							"    return result;",
							"}",
							"",
							"function makeidNumber(length) {",
							"    var result           = '';",
							"    var characters       = '0123456789';",
							"    var charactersLength = characters.length;",
							"    for ( var i = 0; i < length; i++ ) {",
							"      result += characters.charAt(Math.floor(Math.random() * ",
							" charactersLength));",
							"   }",
							"   return result;",
							"}",
							"",
							"Date.prototype.subDays = function(days) {",
							"    var date = new Date(this.valueOf());",
							"    date.setDate(date.getDate() - days);",
							"    return date;",
							"}",
							"",
							"iuv_length = 17;",
							"",
							"// set global vars",
							"pm.globals.set(\"creditor_institution_code\", makeidNumber(11));",
							"pm.globals.set(\"iupd\", makeidMix(iuv_length));",
							"pm.globals.set(\"iupd2\", makeidMix(iuv_length));",
							"pm.globals.set(\"iuv\", makeidNumber(iuv_length));",
							"pm.globals.set(\"iuv1\", makeidNumber(iuv_length));",
							"pm.globals.set(\"iuv2\", makeidNumber(iuv_length));",
							"pm.globals.set(\"iuv3\", makeidNumber(iuv_length));",
							"",
							"pm.globals.set(\"txid1\", \"1\")",
							"pm.globals.set(\"txid2\", \"2\")",
							"pm.globals.set(\"txid3\", \"1\")",
							"pm.globals.set(\"txid4\", \"2\")",
							"pm.globals.set(\"txid5\", \"1\")",
							"pm.globals.set(\"txid6\", \"2\")",
							"",
							"pm.globals.set(\"validity_date\", new Date().addDays(10));",
							"pm.globals.set(\"due_date\", new Date().addDays(25));",
							"pm.globals.set(\"retention_date\", new Date().addDays(90));",
							"pm.globals.set(\"invalid_due_date\", new Date().subDays(5));",
							"pm.globals.set(\"payment_date\", getDateNowISOSubMin(15));",
							"",
							"pm.globals.set(\"now_date\", new Date().toISOString().split('T')[0]);",
							"pm.globals.set(\"now_date_more_30_days\", new Date().addDays(30).toISOString().split('T')[0]);",
							"pm.globals.set(\"organization_not_existent\", \"FAKEORG_\"+makeidNumber(11));",
							"pm.globals.set(\"iupd_not_existent\", \"FAKEIUPD_\"+makeidMix(iuv_length));",
							"pm.globals.set(\"iuv_not_existent\", \"FAKEIUV_\"+makeidMix(iuv_length));",
							"pm.globals.set(\"txid_not_existent\", \"FAKETxID_\" +makeidMix(iuv_length))",
							"",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "payments",
			"item": [
				{
					"name": "api test suite",
					"item": [
						{
							"name": "healthCheck",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{payment-host-rest}}/info",
									"host": [
										"{{payment-host-rest}}"
									],
									"path": [
										"info"
									]
								}
							},
							"response": []
						},
						{
							"name": "API Config - createCreditorInstitution",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"createCreditorInstitution\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"id_dominio\", pm.globals.get(\"creditor_institution_code\"));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"creditor_institution_code\": \"{{id_dominio}}\",\n  \"enabled\": true,\n  \"business_name\": \"Comune di Lorem Ipsum\",\n  \"address\": {\n    \"location\": \"Via delle vie 3\",\n    \"city\": \"Rome\",\n    \"zip_code\": \"00187\",\n    \"country_code\": \"RM\",\n    \"tax_domicile\": \"00111\"\n  },\n  \"psp_payment\": true,\n  \"reporting_ftp\": false,\n  \"reporting_zip\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api-config-host}}/{{api-config-base-path}}/creditorinstitutions",
									"host": [
										"{{api-config-host}}"
									],
									"path": [
										"{{api-config-base-path}}",
										"creditorinstitutions"
									]
								}
							},
							"response": []
						},
						{
							"name": "API Config - createStation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"createStation\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.globals.set(\"station_code\", pm.environment.get('idStation'));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"station_code\": \"{{station_code}}\",\n    \"enabled\": true,\n    \"version\": 1,\n    \"ip\": \"NodoDeiPagamentiDellaPATest.sia.eu\",\n    \"password\": \"password\",\n    \"port\": 80,\n    \"redirect_ip\": \"paygov.collaudo.regione.lazio.it\",\n    \"redirect_path\": \"nodo-regionale-fesp/paaInviaRispostaPagamento.html\",\n    \"redirect_port\": 443,\n    \"service\": \"openspcoop/PD/RT6TPDREGVENETO\",\n    \"redirect_protocol\": \"HTTPS\",\n    \"proxy_enabled\": true,\n    \"proxy_host\": \"10.101.1.95\",\n    \"proxy_port\": 8080,\n    \"protocol\": \"HTTP\",\n    \"thread_number\": 2,\n    \"timeout_a\": 15,\n    \"timeout_b\": 30,\n    \"timeout_c\": 120,\n    \"flag_online\": true,\n    \"broker_code\": \"80007580279\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api-config-host}}/{{api-config-base-path}}/stations",
									"host": [
										"{{api-config-host}}"
									],
									"path": [
										"{{api-config-base-path}}",
										"stations"
									]
								}
							},
							"response": []
						},
						{
							"name": "API Config - createCreditorInstitutionStation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"createCreditorInstitutionStation\", function () {",
											"  pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"station_code\": \"{{station_code}}\",\n    \"application_code\": 1,\n    \"segregation_code\": 1,\n    \"mod4\": false,\n    \"broadcast\": false,\n    \"aux_digit\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api-config-host}}/{{api-config-base-path}}/creditorinstitutions/:code/stations",
									"host": [
										"{{api-config-host}}"
									],
									"path": [
										"{{api-config-base-path}}",
										"creditorinstitutions",
										":code",
										"stations"
									],
									"variable": [
										{
											"key": "code",
											"value": "{{id_dominio}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "createDebtPosition_multiOptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"",
											"pm.globals.set(\"creditor_saved_multi\", pm.globals.get(\"id_dominio\"));",
											"pm.globals.set(\"iupd_saved_multi\", pm.globals.get(\"iupd\"));",
											"pm.globals.set(\"iuv_saved_multi_total\", pm.globals.get(\"iuv1\"));",
											"pm.globals.set(\"iuv_saved_multi_partial_1\", pm.globals.get(\"iuv2\"));",
											"pm.globals.set(\"iuv_saved_multi_partial_2\", pm.globals.get(\"iuv3\"));",
											"pm.globals.set(\"txid_saved_1\", pm.globals.get(\"txid1\"));",
											"pm.globals.set(\"txid_saved_2\", pm.globals.get(\"txid2\"));",
											"pm.globals.set(\"txid_saved_3\", pm.globals.get(\"txid3\"));",
											"pm.globals.set(\"txid_saved_4\", pm.globals.get(\"txid4\"));",
											"pm.globals.set(\"txid_saved_5\", pm.globals.get(\"txid5\"));",
											"pm.globals.set(\"txid_saved_6\", pm.globals.get(\"txid6\"));",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuv1}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 1 FINAL\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"{{txid1}}\",\r\n          \"amount\": 9000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"{{txid2}}\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"iuv\": \"{{iuv2}}\",\r\n      \"amount\": 5000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 2 NOT FINAL\",\r\n      \"isPartialPayment\": true,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"{{txid3}}\",\r\n          \"amount\": 4000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"{{txid4}}\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"iuv\": \"{{iuv3}}\",\r\n      \"amount\": 5000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE opt 3 NOT FINAL\",\r\n      \"isPartialPayment\": true,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"{{txid5}}\",\r\n          \"amount\": 4000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"{{txid6}}\",\r\n          \"amount\": 1000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{id_dominio}}/debtpositions",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{id_dominio}}",
										"debtpositions"
									]
								}
							},
							"response": []
						},
						{
							"name": "publishDebtPosition_multiOption",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_multi}}/publish",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions",
										"{{iupd_saved_multi}}",
										"publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "createNewDebtPositionSameOrganization_CanoneUnico",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(201);",
											"});",
											"pm.globals.set(\"iupd_saved_2\", pm.globals.get(\"iupd2\"));",
											"pm.globals.set(\"iuv_cu\", pm.globals.get(\"iuvCU\"));",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function makeidNumber(length) {\r",
											"    var result           = '';\r",
											"    var characters       = '0123456789';\r",
											"    var charactersLength = characters.length;\r",
											"    for ( var i = 0; i < length; i++ ) {\r",
											"      result += characters.charAt(Math.floor(Math.random() * \r",
											" charactersLength));\r",
											"   }\r",
											"   return result;\r",
											"}\r",
											"\r",
											"pm.globals.set(\"iuvCU\", \"47\" + makeidNumber(15));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"iupd\": \"{{iupd2}}\",\r\n  \"type\": \"F\",\r\n  \"fiscalCode\": \"JHNDOE00A01F205N\",\r\n  \"fullName\": \"John Doe\",\r\n  \"streetName\": \"streetName\",\r\n  \"civicNumber\": \"11\",\r\n  \"postalCode\": \"00100\",\r\n  \"city\": \"city\",\r\n  \"province\": \"RM\",\r\n  \"region\": \"RM\",\r\n  \"country\": \"IT\",\r\n  \"email\": \"lorem@lorem.com\",\r\n  \"phone\": \"333-123456789\",\r\n  \"companyName\": \"companyName\",\r\n  \"officeName\": \"officeName\",\r\n  \"paymentOption\": [\r\n    {\r\n      \"iuv\": \"{{iuvCU}}\",\r\n      \"amount\": 10000,\r\n      \"description\": \"Canone Unico Patrimoniale - CORPORATE\",\r\n      \"isPartialPayment\": false,\r\n      \"dueDate\": \"{{due_date}}\",\r\n      \"retentionDate\": \"{{retention_date}}\",\r\n      \"fee\": 0,\r\n      \"transfer\": [\r\n        {\r\n          \"idTransfer\": \"1\",\r\n          \"amount\": 8000,\r\n          \"remittanceInformation\": \"remittanceInformation 1\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        },\r\n        {\r\n          \"idTransfer\": \"2\",\r\n          \"amount\": 2000,\r\n          \"remittanceInformation\": \"remittanceInformation 2\",\r\n          \"category\": \"9/0101108TS/\",\r\n          \"iban\": \"IT0000000000000000000000000\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions"
									]
								}
							},
							"response": []
						},
						{
							"name": "publishDebtPosition_sameOrganization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gpdhost}}/organizations/{{creditor_saved_multi}}/debtpositions/{{iupd_saved_2}}/publish",
									"host": [
										"{{gpdhost}}"
									],
									"path": [
										"organizations",
										"{{creditor_saved_multi}}",
										"debtpositions",
										"{{iupd_saved_2}}",
										"publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "verify payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"outcome OK\", () => {",
											"    var responseJson = xml2Json(responseBody);",
											"    var outcome = responseJson['soapenv:Envelope']['soapenv:Body']['ns3:paVerifyPaymentNoticeRes']['outcome'];",
											"    pm.expect(outcome).to.eql(\"OK\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "SOAPAction",
										"value": "paVerifyPaymentNotice",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:nod=\"http://pagopa-api.pagopa.gov.it/pa/paForNode.xsd\">\n    <soapenv:Header />\n    <soapenv:Body>\n        <nod:paVerifyPaymentNoticeReq>\n            <idPA>{{creditor_saved_multi}}</idPA>\n            <idBrokerPA>{{idBrokerPA}}</idBrokerPA>\n            <idStation>{{idStation}}</idStation>\n            <qrCode>\n                <fiscalCode>{{creditor_saved_multi}}</fiscalCode>\n                <noticeNumber>3{{iuv_saved_multi_total}}</noticeNumber>\n            </qrCode>\n        </nod:paVerifyPaymentNoticeReq>\n    </soapenv:Body>\n</soapenv:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{payment-host}}",
									"host": [
										"{{payment-host}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "activate payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"outcome OK\", () => {",
											"    var responseJson = xml2Json(responseBody);",
											"    var outcome = responseJson['soapenv:Envelope']['soapenv:Body']['ns3:paGetPaymentRes']['outcome'];",
											"    pm.expect(outcome).to.eql(\"OK\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "SOAPAction",
										"value": "paGetPayment",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:pafn=\"http://pagopa-api.pagopa.gov.it/pa/paForNode.xsd\">\n    <soapenv:Header />\n    <soapenv:Body>\n        <pafn:paGetPaymentReq>\n            <idPA>{{creditor_saved_multi}}</idPA>\n            <idBrokerPA>{{idBrokerPA}}</idBrokerPA>\n            <idStation>{{idStation}}</idStation>\n            <qrCode>\n                <fiscalCode>{{creditor_saved_multi}}</fiscalCode>\n                <noticeNumber>3{{iuv_saved_multi_total}}</noticeNumber>\n            </qrCode>\n            <amount>10.00</amount>\n        </pafn:paGetPaymentReq>\n    </soapenv:Body>\n</soapenv:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{payment-host}}",
									"host": [
										"{{payment-host}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "send receipt",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"outcome OK\", () => {",
											"    var responseJson = xml2Json(responseBody);",
											"    var outcome = responseJson['soapenv:Envelope']['soapenv:Body']['ns3:paSendRTRes']['outcome'];",
											"    pm.expect(outcome).to.eql(\"OK\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function makeidMix(length) {",
											"    var result           = '';",
											"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    var charactersLength = characters.length;",
											"    for ( var i = 0; i < length; i++ ) {",
											"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
											"    }",
											"    return result;",
											"}",
											"",
											"pm.globals.set(\"receiptId\", makeidMix(33));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "SOAPAction",
										"value": "paSendRT",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  \n<soapenv:Envelope xmlns:pafn=\"http://pagopa-api.pagopa.gov.it/pa/paForNode.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soapenv:Body>\n        <pafn:paSendRTReq>\n            <idPA>{{creditor_saved_multi}}</idPA>\n            <idBrokerPA>{{idBrokerPA}}</idBrokerPA>\n            <idStation>{{idStation}}</idStation>\n            <receipt>\n                <receiptId>{{receiptId}}</receiptId>\n                <noticeNumber>3{{iuv_saved_multi_total}}</noticeNumber>\n                <fiscalCode>{{creditor_saved_multi}}</fiscalCode>\n                <outcome>OK</outcome>\n                <creditorReferenceId>{{iuv_saved_multi_total}}</creditorReferenceId>\n                <paymentAmount>30.00</paymentAmount>\n                <description>test</description>\n                <companyName>company EC</companyName>\n                <officeName>office EC</officeName>\n                <debtor>\n                    <uniqueIdentifier>\n                        <entityUniqueIdentifierType>F</entityUniqueIdentifierType>\n                        <entityUniqueIdentifierValue>JHNDOE00A01F205N</entityUniqueIdentifierValue>\n                    </uniqueIdentifier>\n                    <fullName>John Doe</fullName>\n                    <streetName>street</streetName>\n                    <civicNumber>12</civicNumber>\n                    <postalCode>89020</postalCode>\n                    <city>city</city>\n                    <stateProvinceRegion>MI</stateProvinceRegion>\n                    <country>IT</country>\n                    <e-mail>john.doe@test.it</e-mail>\n                </debtor>\n                <transferList>\n                    <transfer>\n                        <idTransfer>1</idTransfer>\n                        <transferAmount>20.00</transferAmount>\n                        <fiscalCodePA>{{creditor_saved_multi}}</fiscalCodePA>\n                        <IBAN>IT0000000000000000000000000</IBAN>\n                        <remittanceInformation>remittanceInformation1</remittanceInformation>\n                        <transferCategory>G</transferCategory>\n                    </transfer>\n                    <transfer>\n                        <idTransfer>2</idTransfer>\n                        <transferAmount>10.00</transferAmount>\n                        <fiscalCodePA>{{creditor_saved_multi}}</fiscalCodePA>\n                        <IBAN>IT0000000000000000000000001</IBAN>\n                        <remittanceInformation>remittanceInformation2</remittanceInformation>\n                        <transferCategory>G</transferCategory>\n                    </transfer>\n                </transferList>\n                <idPSP>88888888888</idPSP>\n                <pspFiscalCode>88888888888</pspFiscalCode>\n                <pspPartitaIVA>88888888888</pspPartitaIVA>\n                <PSPCompanyName>PSP name</PSPCompanyName>\n                <idChannel>88888888888_01</idChannel>\n                <channelDescription>app</channelDescription>\n                <payer>\n                    <uniqueIdentifier>\n                        <entityUniqueIdentifierType>F</entityUniqueIdentifierType>\n                        <entityUniqueIdentifierValue>JHNDOE00A01F205N</entityUniqueIdentifierValue>\n                    </uniqueIdentifier>\n                    <fullName>John Doe</fullName>\n                    <streetName>street</streetName>\n                    <civicNumber>12</civicNumber>\n                    <postalCode>89020</postalCode>\n                    <city>city</city>\n                    <stateProvinceRegion>MI</stateProvinceRegion>\n                    <country>IT</country>\n                    <e-mail>john.doe@test.it</e-mail>\n                </payer>\n                <paymentMethod>creditCard</paymentMethod>\n                <fee>2.00</fee>\n                <paymentDateTime>2021-10-01T17:48:22</paymentDateTime>\n                <applicationDate>2021-10-01</applicationDate>\n                <transferDate>2021-10-02</transferDate>\n                <metadata>\n                    <mapEntry>\n                        <key>keytest</key>\n                        <value>1</value>\n                    </mapEntry>\n                </metadata>\n            </receipt>\n        </pafn:paSendRTReq>\n    </soapenv:Body>\n</soapenv:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{payment-host}}",
									"host": [
										"{{payment-host}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "send receipt_sameOrg",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"outcome OK\", () => {",
											"    var responseJson = xml2Json(responseBody);",
											"    var outcome = responseJson['soapenv:Envelope']['soapenv:Body']['ns3:paSendRTRes']['outcome'];",
											"    pm.expect(outcome).to.eql(\"OK\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function makeidMix(length) {",
											"    var result           = '';",
											"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
											"    var charactersLength = characters.length;",
											"    for ( var i = 0; i < length; i++ ) {",
											"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
											"    }",
											"    return result;",
											"}",
											"",
											"pm.globals.set(\"receiptId\", makeidMix(33));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "SOAPAction",
										"value": "paSendRT",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "  \n<soapenv:Envelope xmlns:pafn=\"http://pagopa-api.pagopa.gov.it/pa/paForNode.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soapenv:Body>\n        <pafn:paSendRTReq>\n            <idPA>{{creditor_saved_multi}}</idPA>\n            <idBrokerPA>{{idBrokerPA}}</idBrokerPA>\n            <idStation>{{idStation}}</idStation>\n            <receipt>\n                <receiptId>{{receiptId}}</receiptId>\n                <noticeNumber>3{{iuv_cu}}</noticeNumber>\n                <fiscalCode>{{creditor_saved_multi}}</fiscalCode>\n                <outcome>OK</outcome>\n                <creditorReferenceId>{{iuv_cu}}</creditorReferenceId>\n                <paymentAmount>30.00</paymentAmount>\n                <description>test</description>\n                <companyName>company EC</companyName>\n                <officeName>office EC</officeName>\n                <debtor>\n                    <uniqueIdentifier>\n                        <entityUniqueIdentifierType>F</entityUniqueIdentifierType>\n                        <entityUniqueIdentifierValue>JHNDOE00A01F205N</entityUniqueIdentifierValue>\n                    </uniqueIdentifier>\n                    <fullName>John Doe</fullName>\n                    <streetName>street</streetName>\n                    <civicNumber>12</civicNumber>\n                    <postalCode>89020</postalCode>\n                    <city>city</city>\n                    <stateProvinceRegion>MI</stateProvinceRegion>\n                    <country>IT</country>\n                    <e-mail>john.doe@test.it</e-mail>\n                </debtor>\n                <transferList>\n                    <transfer>\n                        <idTransfer>1</idTransfer>\n                        <transferAmount>20.00</transferAmount>\n                        <fiscalCodePA>{{creditor_saved_multi}}</fiscalCodePA>\n                        <IBAN>IT0000000000000000000000000</IBAN>\n                        <remittanceInformation>remittanceInformation1</remittanceInformation>\n                        <transferCategory>G</transferCategory>\n                    </transfer>\n                    <transfer>\n                        <idTransfer>2</idTransfer>\n                        <transferAmount>10.00</transferAmount>\n                        <fiscalCodePA>{{creditor_saved_multi}}</fiscalCodePA>\n                        <IBAN>IT0000000000000000000000001</IBAN>\n                        <remittanceInformation>remittanceInformation2</remittanceInformation>\n                        <transferCategory>G</transferCategory>\n                    </transfer>\n                </transferList>\n                <idPSP>88888888888</idPSP>\n                <pspFiscalCode>88888888888</pspFiscalCode>\n                <pspPartitaIVA>88888888888</pspPartitaIVA>\n                <PSPCompanyName>PSP name</PSPCompanyName>\n                <idChannel>88888888888_01</idChannel>\n                <channelDescription>app</channelDescription>\n                <payer>\n                    <uniqueIdentifier>\n                        <entityUniqueIdentifierType>F</entityUniqueIdentifierType>\n                        <entityUniqueIdentifierValue>JHNDOE00A01F205N</entityUniqueIdentifierValue>\n                    </uniqueIdentifier>\n                    <fullName>John Doe</fullName>\n                    <streetName>street</streetName>\n                    <civicNumber>12</civicNumber>\n                    <postalCode>89020</postalCode>\n                    <city>city</city>\n                    <stateProvinceRegion>MI</stateProvinceRegion>\n                    <country>IT</country>\n                    <e-mail>john.doe@test.it</e-mail>\n                </payer>\n                <paymentMethod>creditCard</paymentMethod>\n                <fee>2.00</fee>\n                <paymentDateTime>2021-10-01T17:48:22</paymentDateTime>\n                <applicationDate>2021-10-01</applicationDate>\n                <transferDate>2021-10-02</transferDate>\n                <metadata>\n                    <mapEntry>\n                        <key>keytest</key>\n                        <value>1</value>\n                    </mapEntry>\n                </metadata>\n            </receipt>\n        </pafn:paSendRTReq>\n    </soapenv:Body>\n</soapenv:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{payment-host}}",
									"host": [
										"{{payment-host}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getReceiptByIUV",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{payment-host-rest}}/payments/{{creditor_saved_multi}}/receipts/{{iuv_saved_multi_total}}",
									"host": [
										"{{payment-host-rest}}"
									],
									"path": [
										"payments",
										"{{creditor_saved_multi}}",
										"receipts",
										"{{iuv_saved_multi_total}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getReceiptsWithLimit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The receipt list\", () => {\r",
											"    //parse the response JSON and test three properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.receipts_list).to.have.lengthOf(1);\r",
											"    pm.expect(responseJson.page_info.more_pages).to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{payment-host-rest}}/payments/{{creditor_saved_multi}}/receipts?page=0&limit=1",
									"host": [
										"{{payment-host-rest}}"
									],
									"path": [
										"payments",
										"{{creditor_saved_multi}}",
										"receipts"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getReceiptsWithoutLimit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The receipt list\", () => {\r",
											"    //parse the response JSON and test three properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.receipts_list).to.have.lengthOf(2);\r",
											"    pm.expect(responseJson.page_info.more_pages).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{payment-host-rest}}/payments/{{creditor_saved_multi}}/receipts?page=0",
									"host": [
										"{{payment-host-rest}}"
									],
									"path": [
										"payments",
										"{{creditor_saved_multi}}",
										"receipts"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getReceiptsByService",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"The receipt list\", () => {\r",
											"    //parse the response JSON and test three properties\r",
											"    const responseJson = pm.response.json();\r",
											"    pm.expect(responseJson.receipts_list).to.have.lengthOf(1);\r",
											"    pm.expect(responseJson.page_info.more_pages).to.eql(false);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{payment-host-rest}}/payments/{{creditor_saved_multi}}/receipts?page=0&service=47",
									"host": [
										"{{payment-host-rest}}"
									],
									"path": [
										"payments",
										"{{creditor_saved_multi}}",
										"receipts"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "service",
											"value": "47"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteCreditorInstitutionStation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"deleteCreditorInstitutionStation\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api-config-host}}/{{api-config-base-path}}/creditorinstitutions/:code/stations/:stationcode",
									"host": [
										"{{api-config-host}}"
									],
									"path": [
										"{{api-config-base-path}}",
										"creditorinstitutions",
										":code",
										"stations",
										":stationcode"
									],
									"variable": [
										{
											"key": "code",
											"value": "{{id_dominio}}"
										},
										{
											"key": "stationcode",
											"value": "{{station_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "deleteStation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"deleteStation\", function () {",
											"  pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api-config-host}}/{{api-config-base-path}}/stations/:id",
									"host": [
										"{{api-config-host}}"
									],
									"path": [
										"{{api-config-base-path}}",
										"stations",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{station_code}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "demand payment notice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"demand _ayment_notice\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "SOAPAction",
										"value": "paDemandPaymentNotice",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:pafn=\"http://pagopa-api.pagopa.gov.it/pa/paForNode.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <soapenv:Body>\n        <pafn:paDemandPaymentNoticeRequest>\n            <idPA>{{creditor_saved_multi}}</idPA>\n            <idBrokerPA>77777777777</idBrokerPA>\n            <idStation>77777777777_1</idStation>\n            <idServizio>12345</idServizio>\n            <datiSpecificiServizioRequest>PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPCEtLSBDcmVhdGVkIHdpdGggTGlxdWlkIFRlY2hub2xvZ2llcyBPbmxpbmUgVG9vbHMgMS4wIChodHRwczovL3d3dy5saXF1aWQtdGVjaG5vbG9naWVzLmNvbSkgLS0+CjxzZXJ2aWNlIHhtbG5zPSJodHRwOi8vUHVudG9BY2Nlc3NvUFNQLnNwY29vcC5nb3YuaXQvR2VuZXJhbFNlcnZpY2UiIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL1B1bnRvQWNjZXNzb1BTUC5zcGNvb3AuZ292Lml0L0dlbmVyYWxTZXJ2aWNlIHNjaGVtYS54c2QiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPgogIDxBbnlFbGVtZW50WW91TGlrZT5Tb21lIERhdGEgT3IgT3RoZXJzIEVsZW1lbnRzPC9BbnlFbGVtZW50WW91TGlrZT4KICA8QW55RWxlbWVudFlvdUxpa2UxPlNvbWUgRGF0c2Rmc2RhIE9yIE90aGVyIEVsZW1lbnRzPC9BbnlFbGVtZW50WW91TGlrZTE+CiAgPEFueUVsZW1lbnRZb3VMaWtlMj5zYWRmYXNkPC9BbnlFbGVtZW50WW91TGlrZTI+CiAgPGNpYW8+U29tZSBEYXRhIE9yIE90aGVyIEVsZW1lbnRzPC9jaWFvPgo8L3NlcnZpY2U+</datiSpecificiServizioRequest>\n        </pafn:paDemandPaymentNoticeRequest>\n    </soapenv:Body>\n</soapenv:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{payment-host}}",
									"host": [
										"{{payment-host}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "api test error",
					"item": [
						{
							"name": "verify payment KO PAA_PAGAMENTO_SCONOSCIUTO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"outcome OK\", () => {",
											"    var responseJson = xml2Json(responseBody);",
											"    var outcome = responseJson['soapenv:Envelope']['soapenv:Body']['ns2:paVerifyPaymentNoticeRes']['outcome'];",
											"    var faultCode = responseJson['soapenv:Envelope']['soapenv:Body']['ns2:paVerifyPaymentNoticeRes']['fault']['faultCode'];",
											"",
											"    pm.expect(outcome).to.eql(\"KO\");",
											"    pm.expect(faultCode).to.eql(\"PAA_PAGAMENTO_SCONOSCIUTO\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "SOAPAction",
										"value": "paVerifyPaymentNotice",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:nod=\"http://pagopa-api.pagopa.gov.it/pa/paForNode.xsd\">\n    <soapenv:Header />\n    <soapenv:Body>\n        <nod:paVerifyPaymentNoticeReq>\n            <idPA>{{creditor_saved_multi}}</idPA>\n            <idBrokerPA>{{idBrokerPA}}</idBrokerPA>\n            <idStation>{{idStation}}</idStation>\n            <qrCode>\n                <fiscalCode>{{creditor_saved_multi}}</fiscalCode>\n                <noticeNumber>312345678901234567</noticeNumber>\n            </qrCode>\n        </nod:paVerifyPaymentNoticeReq>\n    </soapenv:Body>\n</soapenv:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{payment-host}}",
									"host": [
										"{{payment-host}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "verify payment KO PAA_PAGAMENTO_DUPLICATO",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {",
											"  pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"outcome OK\", () => {",
											"    var responseJson = xml2Json(responseBody);",
											"    var outcome = responseJson['soapenv:Envelope']['soapenv:Body']['ns2:paVerifyPaymentNoticeRes']['outcome'];",
											"    var faultCode = responseJson['soapenv:Envelope']['soapenv:Body']['ns2:paVerifyPaymentNoticeRes']['fault']['faultCode'];",
											"",
											"    pm.expect(outcome).to.eql(\"KO\");",
											"    pm.expect(faultCode).to.eql(\"PAA_PAGAMENTO_DUPLICATO\");",
											"",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "SOAPAction",
										"value": "paVerifyPaymentNotice",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:nod=\"http://pagopa-api.pagopa.gov.it/pa/paForNode.xsd\">\n    <soapenv:Header />\n    <soapenv:Body>\n        <nod:paVerifyPaymentNoticeReq>\n            <idPA>{{creditor_saved_multi}}</idPA>\n            <idBrokerPA>{{idBrokerPA}}</idBrokerPA>\n            <idStation>{{idStation}}</idStation>\n            <qrCode>\n                <fiscalCode>{{creditor_saved_multi}}</fiscalCode>\n                <noticeNumber>3{{iuv_saved_multi_total}}</noticeNumber>\n            </qrCode>\n        </nod:paVerifyPaymentNoticeReq>\n    </soapenv:Body>\n</soapenv:Envelope>",
									"options": {
										"raw": {
											"language": "xml"
										}
									}
								},
								"url": {
									"raw": "{{payment-host}}",
									"host": [
										"{{payment-host}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getReceiptByIUV_404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{payment-host-rest}}/payments/{{creditor_institution_code}}/receipts/{{iuv_not_existent}}",
									"host": [
										"{{payment-host-rest}}"
									],
									"path": [
										"payments",
										"{{creditor_institution_code}}",
										"receipts",
										"{{iuv_not_existent}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "getReceipts_404_wrong_page_num",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{payment-host-rest}}/payments/{{creditor_institution_code}}/receipts?page=1&limit=10",
									"host": [
										"{{payment-host-rest}}"
									],
									"path": [
										"payments",
										"{{creditor_institution_code}}",
										"receipts"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getReceipts_404_wrong_organization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{payment-host-rest}}/payments/{{organization_not_existent}}/receipts?page=0&limit=10",
									"host": [
										"{{payment-host-rest}}"
									],
									"path": [
										"payments",
										"{{organization_not_existent}}",
										"receipts"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "getReceipts_500_validation_check",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"check_status\", function () {\r",
											"  pm.response.to.have.status(500);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{payment-host-rest}}/payments/{{creditor_institution_code}}/receipts?page=-1&limit=-10",
									"host": [
										"{{payment-host-rest}}"
									],
									"path": [
										"payments",
										"{{creditor_institution_code}}",
										"receipts"
									],
									"query": [
										{
											"key": "page",
											"value": "-1"
										},
										{
											"key": "limit",
											"value": "-10"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"function getDateNowISOAddMin(minutesToAdd) {",
							"    const currentDate = new Date();",
							"    const date = new Date(currentDate.getTime() + minutesToAdd*60000);",
							"    return date.toISOString();    ",
							"}",
							"",
							"function getDateNowISOSubMin(minutesToSub) {",
							"    const currentDate = new Date();",
							"    const date = new Date(currentDate.getTime() - minutesToSub*60000);",
							"    return date.toISOString();    ",
							"}",
							"",
							"",
							"Date.prototype.addDays = function(days) {",
							"    var date = new Date(this.valueOf());",
							"    date.setDate(date.getDate() + days);",
							"    return date;",
							"}",
							"",
							"var date = new Date();",
							"console.log(date.addDays(5));",
							"",
							"",
							"function makeidMix(length) {",
							"    var result           = '';",
							"    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
							"    var charactersLength = characters.length;",
							"    for ( var i = 0; i < length; i++ ) {",
							"      result += characters.charAt(Math.floor(Math.random() * charactersLength));",
							"    }",
							"    return result;",
							"}",
							"",
							"function makeidNumber(length) {",
							"    var result           = '';",
							"    var characters       = '0123456789';",
							"    var charactersLength = characters.length;",
							"    for ( var i = 0; i < length; i++ ) {",
							"      result += characters.charAt(Math.floor(Math.random() * ",
							" charactersLength));",
							"   }",
							"   return result;",
							"}",
							"",
							"Date.prototype.subDays = function(days) {",
							"    var date = new Date(this.valueOf());",
							"    date.setDate(date.getDate() - days);",
							"    return date;",
							"}",
							"",
							"iuv_length = 17;",
							"",
							"// set global vars",
							"pm.globals.set(\"creditor_institution_code\", makeidNumber(11));",
							"pm.globals.set(\"iupd\", makeidMix(iuv_length));",
							"pm.globals.set(\"iupd2\", makeidMix(iuv_length));",
							"pm.globals.set(\"iuv\", makeidNumber(iuv_length));",
							"pm.globals.set(\"iuv1\", makeidNumber(iuv_length));",
							"pm.globals.set(\"iuv2\", makeidNumber(iuv_length));",
							"pm.globals.set(\"iuv3\", makeidNumber(iuv_length));",
							"",
							"//pm.globals.set(\"txid1\", makeidMix(iuv_length))",
							"//pm.globals.set(\"txid2\", makeidMix(iuv_length))",
							"//pm.globals.set(\"txid3\", makeidMix(iuv_length))",
							"//pm.globals.set(\"txid4\", makeidMix(iuv_length))",
							"//pm.globals.set(\"txid5\", makeidMix(iuv_length))",
							"//pm.globals.set(\"txid6\", makeidMix(iuv_length))",
							"",
							"pm.globals.set(\"txid1\", \"1\")",
							"pm.globals.set(\"txid2\", \"2\")",
							"pm.globals.set(\"txid3\", \"1\")",
							"pm.globals.set(\"txid4\", \"2\")",
							"pm.globals.set(\"txid5\", \"1\")",
							"pm.globals.set(\"txid6\", \"2\")",
							"",
							"pm.globals.set(\"validity_date\", new Date().addDays(10));",
							"pm.globals.set(\"due_date\", new Date().addDays(30));",
							"pm.globals.set(\"retention_date\", new Date().addDays(90));",
							"pm.globals.set(\"invalid_due_date\", new Date().subDays(5));",
							"pm.globals.set(\"payment_date\", getDateNowISOSubMin(15));",
							"",
							"pm.globals.set(\"now_date\", new Date().toISOString().split('T')[0]);",
							"pm.globals.set(\"organization_not_existent\", \"FAKEORG_\"+makeidNumber(11));",
							"pm.globals.set(\"iupd_not_existent\", \"FAKEIUPD_\"+makeidMix(iuv_length));",
							"pm.globals.set(\"iuv_not_existent\", \"FAKEIUV_\"+makeidMix(iuv_length));",
							"pm.globals.set(\"txid_not_existent\", \"FAKETxID_\" +makeidMix(iuv_length))",
							"",
							"//pm.globals.set(\"iuv_tipo\", _.random(0, 6));",
							"",
							"",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "reporting-analysis",
			"item": [
				{
					"name": "getFlowList",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{reporting-analysis-host}}/organizations/{{creditor_institution_code}}/reportings",
							"host": [
								"{{reporting-analysis-host}}"
							],
							"path": [
								"organizations",
								"{{creditor_institution_code}}",
								"reportings"
							]
						}
					},
					"response": []
				},
				{
					"name": "getFlow",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"check_status\", function () {",
									"  pm.response.to.have.status(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{reporting-analysis-host}}/organizations/{{creditor_institution_code}}/reportings/:flowId/date/:date",
							"host": [
								"{{reporting-analysis-host}}"
							],
							"path": [
								"organizations",
								"{{creditor_institution_code}}",
								"reportings",
								":flowId",
								"date",
								":date"
							],
							"variable": [
								{
									"key": "flowId",
									"value": "2022-01-12PPAYITR1XXX-S239349322"
								},
								{
									"key": "date",
									"value": "2022-01-11T23:31:05"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
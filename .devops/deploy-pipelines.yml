parameters:
  - name: SEMVER
    displayName: "When packing a release, define the version bump to apply"
    type: string
    values:
      - major
      - minor
      - patch
      - buildNumber
      - skip
    default: patch
  - name: ENV
    displayName: Target Environment
    type: string
    default: dev
    values:
      - dev
      - uat
      - prod
  - name: REPOSITORY
    displayName: "Repository"
    type: string
    values:
      - gpd
      - payments
      - reporting-analysis
      - reporting-batch
      - reporting-service
    default: gpd

variables:
  ${{ if eq(parameters['ENV'], 'dev') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    CONTAINER_REGISTRY: $(DEV_CONTAINER_REGISTRY)
    CONTAINER_NAMESPACE: $(DEV_CONTAINER_NAMESPACE)
    APP_NAME: $(DEV_WEB_APP_NAME)
  ${{ if eq(parameters['ENV'], 'uat') }}:
    AZURE_SUBSCRIPTION: $(DEV_AZURE_SUBSCRIPTION)
    CONTAINER_REGISTRY: $(DEV_CONTAINER_REGISTRY)
    CONTAINER_NAMESPACE: $(UAT_CONTAINER_NAMESPACE)
    APP_NAME: $(UAT_WEB_APP_NAME)
  ${{ if eq(parameters['ENV'], 'prod') }}:
    AZURE_SUBSCRIPTION: $(PROD_AZURE_SUBSCRIPTION)
    CONTAINER_REGISTRY: $(PROD_CONTAINER_REGISTRY)
    CONTAINER_NAMESPACE: $(PROD_CONTAINER_NAMESPACE)
    APP_NAME: $(PROD_WEB_APP_NAME)

  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: "-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)"
  title: ""
  sha: ""
  tag: ""

# Only manual triggers
trigger: none
pr: none

pool:
  vmImage: ubuntu-latest

stages:
  # Create a release
  - stage: release_service
    # bump version on main branch and if SEMVER is not 'skip'
    condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/main'), ne('${{ parameters.SEMVER }}', 'skip'))
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: releaseService
        steps:
          - checkout: self
            clean: true
            persistCredentials: true

          - script: |
              git config --global user.name "$(GIT_USERNAME)"
              git config --global user.email "$(GIT_EMAIL)"
            displayName: Set Git global config

          - template: azure-templates/maven-versioning.yml
            parameters:
              subproject: "${{ parameters.REPOSITORY }}"
              semver: "${{ parameters.SEMVER }}"

          - task: Bash@3
            name: pomversion
            inputs:
              targetType: "inline"
              script: |
                version=$(mvn -f ${{ parameters.REPOSITORY }}/pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
                echo "##vso[task.setvariable variable=next;isOutput=true]$version"
                sh report/bumper.sh ${{ parameters.REPOSITORY }} $version
                cat report/pom.xml
              failOnStderr: true

          - script: |
              echo "Checkout on ${{variables['Build.SourceBranchName']}}"
              git checkout ${{variables['Build.SourceBranchName']}}
            displayName: Checkout on source branch

          # bump version
          - script: |
              git add ${{ parameters.REPOSITORY }}/pom.xml
              git add report/pom.xml
              git commit -m "Bump version [skip ci]"
              git push origin ${{variables['Build.SourceBranchName']}}
              git push --tags

          - script: |
              HEAD_SHA=$(git rev-parse HEAD)
              TAG="${{ parameters.REPOSITORY }}/$(pomversion.next)"
              TITLE="Release ${{ parameters.REPOSITORY }}/$(pomversion.next)"
              echo "##vso[task.setvariable variable=title]$TITLE"
              echo "##vso[task.setvariable variable=sha]$HEAD_SHA"
              echo "##vso[task.setvariable variable=tag]$TAG"
            displayName: Setting vars

          - script: |
              echo $(tag)
              echo $(title)
              echo $(sha)
            displayName: Debug step

          # create new release
          - task: GitHubRelease@0
            inputs:
              gitHubConnection: $(GITHUB_CONNECTION)
              repositoryName: $(Build.Repository.Name)
              action: create
              target: $(sha)
              tagSource: manual
              tag: $(tag)
              title: $(title)
              addChangelog: true

  # Deploy on Azure
  - stage: deploy
    condition: not(failed('releaseService'))
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: deployJava
        steps:
          - checkout: self
            clean: true
            persistCredentials: true
            submodules: true

          - task: Cache@2
            inputs:
              key: 'maven | "$(Agent.OS)" | pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
            displayName: Set Maven Cache

          - task: Bash@3
            name: pomversion
            inputs:
              targetType: "inline"
              script: |
                version=$(mvn -f ${{ parameters.REPOSITORY }}/pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)
                echo "##vso[task.setvariable variable=next;isOutput=true]$version"
              failOnStderr: true

          - task: Bash@3
            # When the maven task is installed, mvn can be used in a script
            name: mvn_get_version
            inputs:
              targetType: "inline"
              script: |
                mvn -f ${{ parameters.REPOSITORY }}/pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout
              failOnStderr: true

          - task: Maven@3
            displayName: Build
            inputs:
              mavenPomFile: "./pom.xml"
              mavenOptions: "-Xmx3072m $(MAVEN_OPTS)"
              mavenVersionOption: 'Default'
              javaHomeOption: "JDKVersion"
              jdkVersionOption: "1.11"
              jdkArchitectureOption: "x64"
              testResultsFiles: "**/surefire-reports/TEST-*.xml"
              publishJUnitResults: true
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
              goals: "install"

          - task: Docker@2
            displayName: Build and push image to container registry
            inputs:
              command: 'buildAndPush'
              containerRegistry: '$(CONTAINER_REGISTRY)'
              repository: '${{ parameters.REPOSITORY }}'
              buildContext: './${{ parameters.REPOSITORY }}'
              Dockerfile: './${{ parameters.REPOSITORY }}/Dockerfile.deploy'
              tags: |
                $(Build.BuildId)
                latest
                $(pomversion.next)

          # deploy gdp | payments
          - task: AzureRMWebAppDeployment@4
            displayName: Deploy App Service (Microservice)
            condition: or(eq('${{ parameters.REPOSITORY }}', 'gpd'), eq('${{ parameters.REPOSITORY }}', 'payments'))
            inputs:
              appType: webAppContainer
              ConnectedServiceName: $(AZURE_SUBSCRIPTION)
              WebAppName: "${{variables.APP_NAME}}-app-${{ parameters.REPOSITORY }}"
              DockerNamespace: "${{variables.CONTAINER_NAMESPACE}}"
              DockerRepository: "${{ parameters.REPOSITORY }}"
              DockerImageTag: "$(Build.BuildId)"

          # deploy reporting-fn
          - task: AzureFunctionAppContainer@1
            displayName: Deploy Function App
            condition: in('${{ parameters.REPOSITORY }}', 'reporting-analysis', 'reporting-batch', 'reporting-service')
            inputs:
              azureSubscription: $(AZURE_SUBSCRIPTION)
              appName: "${{variables.APP_NAME}}-fn-${{replace(parameters.REPOSITORY, 'reporting', 'gpd')}}"
              imageName: "${{variables.CONTAINER_NAMESPACE}}/${{ parameters.REPOSITORY }}:$(Build.BuildId)"
              slotName: production